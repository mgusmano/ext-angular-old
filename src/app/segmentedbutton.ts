import {Component,ViewChild,ElementRef,ComponentFactoryResolver,ViewContainerRef,forwardRef,ContentChildren,QueryList} from '@angular/core';
import { base } from './base';
// Ext Class - Ext.SegmentedButton
class segmentedbuttonMetaData {
	public static XTYPE: string = 'segmentedbutton';
	public static INPUTNAMES: string[] = [
		'activeItem',
		'allowDepress',
		'allowMultiple',
		'allowToggle',
		'alwaysOnTop',
		'autoDestroy',
		'axisLock',
		'baseCls',
		'bind',
		'border',
		'bottom',
		'cardSwitchAnimation',
		'centered',
		'cls',
		'contentEl',
		'control',
		'controller',
		'data',
		'defaultListenerScope',
		'defaults',
		'defaultType',
		'defaultUI',
		'disabled',
		'docked',
		'draggable',
		'enterAnimation',
		'exitAnimation',
		'flex',
		'floated',
		'forceSelection',
		'fullscreen',
		'height',
		'hidden',
		'hideAnimation',
		'hideOnMaskTap',
		'html',
		'id',
		'itemId',
		'items',
		'keyMap',
		'keyMapEnabled',
		'keyMapTarget',
		'layout',
		'left',
		'listeners',
		'manageBorders',
		'margin',
		'masked',
		'maxHeight',
		'maxWidth',
		'minHeight',
		'minWidth',
		'modal',
		'padding',
		'plugins',
		'pressedButtons',
		'publishes',
		'record',
		'reference',
		'referenceHolder',
		'relative',
		'renderTo',
		'right',
		'scrollable',
		'session',
		'shadow',
		'shim',
		'showAnimation',
		'style',
		'styleHtmlCls',
		'styleHtmlContent',
		'toFrontOnShow',
		'tooltip',
		'top',
		'touchAction',
		'tpl',
		'tplWriteMode',
		'translatable',
		'twoWayBindable',
		'ui',
		'useBodyElement',
		'userCls',
		'value',
		'vertical',
		'viewModel',
		'width',
		'x',
		'xtype',
		'y',
		'zIndex',
		'platformConfig',
		'responsiveConfig',
		'fitToParent',
		'config'
];
	public static OUTPUTS: any[] = [
		{name:'activate',parameters:'newActiveItem,segmentedbutton,oldActiveItem'},
		{name:'add',parameters:'segmentedbutton,item,index'},
		{name:'added',parameters:'segmentedbutton,container,index'},
		{name:'beforehide',parameters:'segmentedbutton'},
		{name:'beforeorientationchange',parameters:''},
		{name:'beforeshow',parameters:'segmentedbutton'},
		{name:'beforetofront',parameters:'segmentedbutton'},
		{name:'change',parameters:'segmentedbutton,value,oldValue'},
		{name:'deactivate',parameters:'oldActiveItem,segmentedbutton,newActiveItem'},
		{name:'destroy',parameters:''},
		{name:'erased',parameters:'segmentedbutton'},
		{name:'floatingchange',parameters:'segmentedbutton,positioned'},
		{name:'fullscreen',parameters:'segmentedbutton'},
		{name:'hide',parameters:'segmentedbutton'},
		{name:'initialize',parameters:'segmentedbutton'},
		{name:'move',parameters:'segmentedbutton,item,toIndex,fromIndex'},
		{name:'moved',parameters:'segmentedbutton,container,toIndex,fromIndex'},
		{name:'orientationchange',parameters:''},
		{name:'painted',parameters:'element'},
		{name:'positionedchange',parameters:'segmentedbutton,positioned'},
		{name:'remove',parameters:'segmentedbutton,item,index'},
		{name:'removed',parameters:'segmentedbutton,container,index'},
		{name:'renderedchange',parameters:'segmentedbutton,item,rendered'},
		{name:'resize',parameters:'element'},
		{name:'show',parameters:'segmentedbutton'},
		{name:'tofront',parameters:'segmentedbutton'},
		{name:'toggle',parameters:'segmentedbutton,button,isPressed'},
		{name:'updatedata',parameters:'segmentedbutton,newData'},
		{name:'ready',parameters:''}
];
	public static OUTPUTNAMES: string[] = [
		'activate',
		'add',
		'added',
		'beforehide',
		'beforeorientationchange',
		'beforeshow',
		'beforetofront',
		'change',
		'deactivate',
		'destroy',
		'erased',
		'floatingchange',
		'fullscreen',
		'hide',
		'initialize',
		'move',
		'moved',
		'orientationchange',
		'painted',
		'positionedchange',
		'remove',
		'removed',
		'renderedchange',
		'resize',
		'show',
		'tofront',
		'toggle',
		'updatedata',
		'ready'
];
}
@Component({
  selector: segmentedbuttonMetaData.XTYPE,
	inputs: segmentedbuttonMetaData.INPUTNAMES,
	outputs: segmentedbuttonMetaData.OUTPUTNAMES,
	providers: [{provide: base, useExisting: forwardRef(() => segmentedbutton)}],
	template: '<template #dynamic></template>'
})
export class segmentedbutton extends base {
	constructor(eRef:ElementRef,resolver:ComponentFactoryResolver,vcRef:ViewContainerRef) {
		super(eRef,resolver,vcRef,segmentedbuttonMetaData);
	}
	//@ContentChildren(base,{read:ViewContainerRef}) extbaseRef:QueryList<ViewContainerRef>;
	@ContentChildren(base,{read: base}) extbaseRef: QueryList<base>;
	@ViewChild('dynamic',{read:ViewContainerRef}) dynamicRef:ViewContainerRef;
	ngAfterContentInit() {this.AfterContentInit(this.extbaseRef);}
	ngOnInit() {this.OnInit(this.dynamicRef,segmentedbuttonMetaData);}
}
